import { MessageType } from "./types/message.type.js";
import Info from "./models/info.js";
import { ToastSettingsType } from "./types/settings.type.js";
import { MessageEnum } from "./enums/message.enum.js";
import { PositionEnum } from "./enums/position.enum.js";
import { PositionType } from "./types/position.type.js";
/**
 * Simple toast messages
 */
declare class SimpleToastMessages {
    /**
     * Instance  of simply status messages
     */
    private static instance;
    /**
     * Gets instance
     * @returns instance
     */
    static getInstance(): SimpleToastMessages;
    /**
     * Creates an instance of simply status messages.
     */
    private constructor();
    /**
     * Info  of simply status messages
     */
    static readonly info: Info;
    /**
     * Shows message
     * @param message
     * @param type
     * @param toastSettings?
     *
     * @returns Promise<void>
     *
     * @example
     * ```typescript
     * SimpleToastMessages.show("Hello World", MessageType.SUCCESS);
     * ```
     */
    private show;
    /**
     * Refreshs simple toast messages
     * @param messageContainer
     * @returns refresh
     */
    private refresh;
    /**
     * Renders message
     * @param message
     * @param type
     * @param toastSettings?
     * @returns
     *
     * @example
     * ```typescript
     * SimpleToastMessages.renderMessage("Hello World", MessageType.SUCCESS);
     * ```
     *
     * @example
     * ```typescript
     * SimpleToastMessages.renderMessage("Hello World", MessageType.SUCCESS, {position: PositionEnum.TOP_LEFT});
     * ```
     */
    private renderMessage;
    /**
     * Builds css
     * @param element
     * @returns css
     */
    private buildCss;
    /**
     * Success message
     * @param message
     * @param toastSettings?
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.success("message");
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.success("message",
     * {
     * 		timeOut: 5000
     * });
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.success("message",
     * {
     * 		timeOut: 5000,
     * 		position: PositionEnum.TOP_CENTER
     * });
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.success("message",
     * {
     * 		timeOut: 5000,
     * 		position: PositionEnum.TOP_CENTER,
     * 		opacity: 0.5
     * });
     * ```
     */
    success(message: string, toastSettings?: ToastSettingsType): void;
    /**
     * Errors message
     * @param message
     * @param toastSettings?
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.error("message");
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.error("message",
     * {
     * 		timeOut: 5000
     * });
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.error("message",
     * {
     * 		timeOut: 5000,
     * 		position: PositionEnum.TOP_CENTER
     * });
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.error("message",
     * {
     * 		timeOut: 5000,
     * 		position: PositionEnum.TOP_CENTER,
     * 		opacity: 0.5
     * });
     * ```
     */
    error(message: string, toastSettings?: ToastSettingsType): void;
    /**
     * Warning message
     * @param message
     * @param toastSettings?
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.warning("message");
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.warning("message",
     * {
     * 		timeOut: 5000
     * });
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.warning("message",
     * {
     * 		timeOut: 5000,
     * 		position: PositionEnum.TOP_CENTER
     * });
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.warning("message",
     * {
     * 		timeOut: 5000,
     * 		position: PositionEnum.TOP_CENTER,
     * 		opacity: 0.5
     * });
     * ```
     */
    warning(message: string, toastSettings?: ToastSettingsType): void;
    /**
     * Infos message
     * @param message
     * @param toastSettings?
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.info("message");
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.info("message",
     * {
     * 		timeOut: 5000
     * });
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.info("message",
     * {
     * 		timeOut: 5000,
     * 		position: PositionEnum.TOP_CENTER
     * });
     * ```
     *
     * @example
     * ```ts
     * const stm = SimpleToastMessages.getInstance();
     * stm.info("message",
     * {
     * 		timeOut: 5000,
     * 		position: PositionEnum.TOP_CENTER,
     * 		opacity: 0.5
     * });
     * ```
     */
    info(message: string, toastSettings?: ToastSettingsType): void;
}
declare const _default: {
    SimpleToastMessages: typeof SimpleToastMessages;
};
export default _default;
export { SimpleToastMessages };
export { SimpleToastMessages as stm };
export { SimpleToastMessages as T };
export { MessageType, PositionType, ToastSettingsType };
export { MessageEnum, PositionEnum };
export { Info };
//# sourceMappingURL=SimpleToastMessages.d.ts.map